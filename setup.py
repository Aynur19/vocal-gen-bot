from config import config
TOKEN = config.TELEGRAM_BOT_TOKEN

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, ConversationHandler, filters, ContextTypes


# –®–∞–≥–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
ASK_TEXT, ASK_STYLE = range(2)


# –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –≤–æ–∫–∞–ª. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "- –ù–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å",
        reply_markup=reply_markup,
    )
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"
async def ask_for_song_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª" –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–Ω–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel.",
        reply_markup=ReplyKeyboardRemove()  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    return ASK_TEXT

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å—Ç–∏–ª—è
async def ask_for_vocal_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["song_text"] = update.message.text

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å"
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∫–∞–ª–∞ –∏ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel."
    )
    return ASK_STYLE

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async def generate_vocal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    vocal_style = update.message.text
    song_text = context.user_data["song_text"]

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º
    await update.message.reply_text(
        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n–¢–µ–∫—Å—Ç: {song_text}\n–°—Ç–∏–ª—å: {vocal_style}\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞..."
    )

    # –í–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    await update.message.reply_document(open("sample.wav", "rb"))
    
    return await start(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∏—Ç—å"
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove()
    )
    return await start(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TOKEN).build()

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^(–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª)$"), ask_for_song_text)],
        states={
            ASK_TEXT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, ask_for_vocal_style),
                CommandHandler("cancel", cancel),
            ],
            ASK_STYLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, generate_vocal),
                CommandHandler("cancel", cancel),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling()

if __name__ == "__main__":
    main()




# # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     keyboard = [["–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"]]
#     reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
#     await update.message.reply_text(
#         f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
#         "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –≤–æ–∫–∞–ª. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
#         "- –ù–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.\n\n"
#         "–ö–æ–º–∞–Ω–¥—ã:\n"
#         "/start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
#         "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å",
#         reply_markup=reply_markup,
#     )
#     return ConversationHandler.END

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"
# async def ask_for_song_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
#     reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
#     await update.message.reply_text(
#         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏.", reply_markup=reply_markup
#     )
#     return ASK_TEXT

# # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏ –∏ –∑–∞–ø—Ä–æ—Å —Å—Ç–∏–ª—è
# async def ask_for_vocal_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data["song_text"] = update.message.text

#     keyboard = [["–û—Ç–º–µ–Ω–∏—Ç—å"]]
#     reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
#     await update.message.reply_text(
#         "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∫–∞–ª–∞ –∏ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.", reply_markup=reply_markup
#     )
#     return ASK_STYLE

# # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# async def generate_vocal(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     vocal_style = update.message.text
#     song_text = context.user_data["song_text"]

#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
#     # –ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥–ª—É—à–∫–∏
#     # generate_mock_audio(song_text, vocal_style)

#     # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º —Ñ–∞–π–ª–æ–º
#     await update.message.reply_text(
#         f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n–¢–µ–∫—Å—Ç: {song_text}\n–°—Ç–∏–ª—å: {vocal_style}\n\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞..."
#     )

#     # –í–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
#     await update.message.reply_document(open("sample.wav", "rb"))
    
#     # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
#     return await start(update, context)

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–û—Ç–º–µ–Ω–∏—Ç—å"
# async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     await update.message.reply_text(
#         "–ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=ReplyKeyboardRemove()
#     )
#     return await start(update, context)

# # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# def main():
#     app = Application.builder().token(TOKEN).build()

#     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
#     conv_handler = ConversationHandler(
#         entry_points=[MessageHandler(filters.Regex("^(–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª)$"), ask_for_song_text)],
#         states={
#             ASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_for_vocal_style)],
#             ASK_STYLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_vocal)],
#         },
#         fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∏—Ç—å)$"), cancel)],
#     )

#     # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
#     app.add_handler(CommandHandler("start", start))
#     app.add_handler(conv_handler)

#     # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
#     app.run_polling()

# if __name__ == "__main__":
#     main()


# # from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
# # from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
# # import os
# # import time

# # from config import config

# # TOKEN = config.TELEGRAM_BOT_TOKEN

# # # –≠—Ç–∞–ø—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
# # GREETING, SONG_TEXT, VOCAL_STYLE = range(3)

# # # –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
# # MOCK_AUDIO_PATH = "demo_audio.wav"


# # # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# # async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     user_name = update.effective_user.first_name
# #     await update.message.reply_text(
# #         f"–ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–∫–∞–ª–∞. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
# #         "üìã **–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**:\n"
# #         "- –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª –∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–Ω–∏\n"
# #         # "- –£–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª—å –≤–æ–∫–∞–ª–∞\n\n"
# #         "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
# #         reply_markup=ReplyKeyboardMarkup([["üé§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"]], resize_keyboard=True)
# #     )
# #     return GREETING


# # # 2. –ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏
# # async def ask_for_song_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     await update.message.reply_text(
# #         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–∑–≤—É—á–∏—Ç—å.",
# #         reply_markup=ReplyKeyboardRemove()
# #     )
# #     return SONG_TEXT


# # # 3. –ü—Ä–æ—Å—å–±–∞ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∏–ª—å –≤–æ–∫–∞–ª–∞
# # async def ask_for_vocal_style(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     context.user_data['song_text'] = update.message.text.strip()
# #     await update.message.reply_text(
# #         "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤–æ–∫–∞–ª–∞ –∏ –ª—é–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: \"–í–µ—Å—ë–ª—ã–π, —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–∏–ø–µ–≤–µ\"."
# #     )
# #     return VOCAL_STYLE


# # # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏
# # async def process_vocal_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     context.user_data['vocal_style'] = update.message.text.strip()
# #     song_text = context.user_data['song_text']
# #     vocal_style = context.user_data['vocal_style']

# #     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å song_text –∏ vocal_style –≤ –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏.
# #     print(f"–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: {song_text}")
# #     print(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∏–ª—å: {vocal_style}")

# #     # –≠–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
# #     time.sleep(3)

# #     # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
# #     await update.message.reply_audio(audio=open(MOCK_AUDIO_PATH, 'rb'))
# #     await update.message.reply_text(
# #         "–í–∞—à –≤–æ–∫–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
# #         reply_markup=ReplyKeyboardMarkup([["üé§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"]], resize_keyboard=True)
# #     )
# #     return GREETING


# # # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
# # async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
# #     await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
# #     return ConversationHandler.END


# # def main():
# #     app = Application.builder().token(TOKEN).build()

# #     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
# #     conv_handler = ConversationHandler(
# #         entry_points=[CommandHandler("start", start)],
# #         states={
# #             GREETING: [MessageHandler(filters.Regex("üé§ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–∫–∞–ª"), ask_for_song_text)],
# #             SONG_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_for_vocal_style)],
# #             VOCAL_STYLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_vocal_request)],
# #         },
# #         fallbacks=[CommandHandler("cancel", cancel)]
# #     )

# #     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
# #     app.add_handler(conv_handler)

# #     # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# #     app.run_polling()


# # if __name__ == "__main__":
# #     main()
